<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

using FluentAssertions;
using Xunit;
using System;

namespace Asv.Tools.Test
{
    public class SpanBitHelperTest
    {
        public const double Fraction1 = .00000001;
        public const double Offset1 = 0;
    <#
       uint num = 1;
       for (int i = 3; i <= 32; i++)
       {
            num = (num << 1) + 1;
            var negInf = (num << 1) + 1;
    #>
         #region FixedPointS<#= i #>

         [Theory]
        [InlineData(SpanBitHelper.FixedPointS<#= i #>Max + 1, double.PositiveInfinity)]
        [InlineData(SpanBitHelper.FixedPointS<#= i #>Max, SpanBitHelper.FixedPointS<#= i #>Max)]
        [InlineData(SpanBitHelper.FixedPointS<#= i #>Max/2.0, SpanBitHelper.FixedPointS<#= i #>Max/2.0)]
        [InlineData(SpanBitHelper.FixedPointS<#= i #>Max / 3.0, SpanBitHelper.FixedPointS<#= i #>Max / 3.0)]

        [InlineData(0.0, 0.0)]

        [InlineData(SpanBitHelper.FixedPointS<#= i #>Min, SpanBitHelper.FixedPointS<#= i #>Min)]
        [InlineData(SpanBitHelper.FixedPointS<#= i #>Min/2.0, SpanBitHelper.FixedPointS<#= i #>Min/2.0)]
        [InlineData(SpanBitHelper.FixedPointS<#= i #>Min / 3.0, SpanBitHelper.FixedPointS<#= i #>Min / 3.0)]
        [InlineData(SpanBitHelper.FixedPointS<#= i #>Min -1, double.NegativeInfinity)]
        

        [InlineData(double.NaN, double.NaN)]
        [InlineData(double.PositiveInfinity, double.PositiveInfinity)]
        [InlineData(double.NegativeInfinity, double.NegativeInfinity)]
        public void FixedPointS<#= i #>Test(double writed,double expected)
        {
            var data = new byte[256];
            var writeSpan = new Span<byte>(data);
            var readSpan = new ReadOnlySpan<byte>(data);
            uint bitIndex = 0;
            SpanBitHelper.SetFixedPointS<#= i #>Bit(ref writeSpan, ref bitIndex,writed);
            Assert.Equal(data.Length, writeSpan.Length); // Check thant didn't slice span
            Assert.Equal(<#= i #>U,bitIndex); // check correct bit length

            bitIndex = 0;
            var value = SpanBitHelper.GetFixedPointS<#= i #>Bit(ref readSpan, ref bitIndex);

            if (double.IsNaN(expected))
            {
                Assert.Equal(expected,value);
            }
            else
            {
                value.Should().BeApproximately(expected, 1.0);
            }
            Assert.Equal(data.Length, readSpan.Length); // Check thant didn't slice span
            Assert.Equal(<#= i #>U, bitIndex); // check correct bit length
        }

        [Theory]
        [InlineData((SpanBitHelper.FixedPointS<#= i #>Max + 1) * Fraction1, double.PositiveInfinity, Fraction1)]
        [InlineData(SpanBitHelper.FixedPointS<#= i #>Max * Fraction1, SpanBitHelper.FixedPointS<#= i #>Max * Fraction1, Fraction1)]
        [InlineData(SpanBitHelper.FixedPointS<#= i #>Max * Fraction1 /2.0, SpanBitHelper.FixedPointS<#= i #>Max * Fraction1 /2.0, Fraction1)]
        [InlineData(SpanBitHelper.FixedPointS<#= i #>Max * Fraction1 / 3.0, SpanBitHelper.FixedPointS<#= i #>Max * Fraction1 / 3.0, Fraction1)]

        [InlineData(0, 0,Fraction1)]

        [InlineData(SpanBitHelper.FixedPointS<#= i #>Min * Fraction1/2.0, SpanBitHelper.FixedPointS<#= i #>Min * Fraction1 / 2.0, Fraction1)]
        [InlineData(SpanBitHelper.FixedPointS<#= i #>Min * Fraction1 / 3.0, SpanBitHelper.FixedPointS<#= i #>Min * Fraction1 / 3.0, Fraction1)]
        [InlineData(SpanBitHelper.FixedPointS<#= i #>Min * Fraction1, SpanBitHelper.FixedPointS<#= i #>Min * Fraction1, Fraction1)]
        [InlineData((SpanBitHelper.FixedPointS<#= i #>Min - 1) * Fraction1, double.NegativeInfinity, Fraction1)]

        [InlineData(double.NaN, double.NaN, Fraction1)]
        [InlineData(double.PositiveInfinity, double.PositiveInfinity, Fraction1)]
        [InlineData(double.NegativeInfinity, double.NegativeInfinity, Fraction1)]
        public void FixedPointS<#= i #>TestFraction(double writed, double expected, double fraction)
        {
            var data = new byte[256];
            var writeSpan = new Span<byte>(data);
            var readSpan = new ReadOnlySpan<byte>(data);
            uint bitIndex = 0;
            SpanBitHelper.SetFixedPointS<#= i #>Bit(ref writeSpan, ref bitIndex, writed, fraction);
            Assert.Equal(data.Length, writeSpan.Length); // Check thant didn't slice span
            Assert.Equal(<#= i #>U, bitIndex); // check correct bit length

            bitIndex = 0;
            var value = SpanBitHelper.GetFixedPointS<#= i #>Bit(ref readSpan, ref bitIndex, fraction);
            if (double.IsNaN(expected))
            {
                Assert.Equal(expected, value);
            }
            else
            {
                value.Should().BeApproximately(expected, fraction);
            }
            Assert.Equal(data.Length, readSpan.Length); // Check thant didn't slice span
            Assert.Equal(<#= i #>U, bitIndex); // check correct bit length
        }

        [Theory]
        [InlineData((SpanBitHelper.FixedPointS<#= i #>Max + 1) * Fraction1 + Offset1, double.PositiveInfinity, Fraction1, Offset1)]
        [InlineData(SpanBitHelper.FixedPointS<#= i #>Max * Fraction1 + Offset1, SpanBitHelper.FixedPointS<#= i #>Max * Fraction1+ Offset1, Fraction1, Offset1)]
        [InlineData(SpanBitHelper.FixedPointS<#= i #>Max * Fraction1/2.0 + Offset1, SpanBitHelper.FixedPointS<#= i #>Max * Fraction1 / 2.0 + Offset1, Fraction1, Offset1)]
        [InlineData(SpanBitHelper.FixedPointS<#= i #>Max * Fraction1 / 3.0 + Offset1, SpanBitHelper.FixedPointS<#= i #>Max * Fraction1 / 3.0 + Offset1, Fraction1, Offset1)]

        [InlineData(0+ Offset1, 0+ Offset1, Fraction1, Offset1)]

        [InlineData(SpanBitHelper.FixedPointS<#= i #>Min * Fraction1 / 3.0 + Offset1, SpanBitHelper.FixedPointS<#= i #>Min * Fraction1/3.0 + Offset1, Fraction1, Offset1)]
        [InlineData(SpanBitHelper.FixedPointS<#= i #>Min * Fraction1 /2.0 + Offset1, SpanBitHelper.FixedPointS<#= i #>Min * Fraction1/2.0 + Offset1, Fraction1, Offset1)]
        [InlineData(SpanBitHelper.FixedPointS<#= i #>Min * Fraction1 + Offset1, SpanBitHelper.FixedPointS<#= i #>Min * Fraction1 + Offset1, Fraction1, Offset1)]
        [InlineData((SpanBitHelper.FixedPointS<#= i #>Min - 1) * Fraction1 + Offset1, double.NegativeInfinity, Fraction1, Offset1)]

        [InlineData(double.NaN, double.NaN, Fraction1, Offset1)]
        [InlineData(double.PositiveInfinity, double.PositiveInfinity, Fraction1, Offset1)]
        [InlineData(double.NegativeInfinity, double.NegativeInfinity, Fraction1, Offset1)]
        public void FixedPointS<#= i #>TestFractionWithOffset(double writed, double expected, double fraction, double offset)
        {
            var data = new byte[256];
            var writeSpan = new Span<byte>(data);
            var readSpan = new ReadOnlySpan<byte>(data);
            uint bitIndex = 0;
            SpanBitHelper.SetFixedPointS<#= i #>Bit(ref writeSpan, ref bitIndex, writed, fraction, offset);
            Assert.Equal(data.Length, writeSpan.Length); // Check thant didn't slice span
            Assert.Equal(<#= i #>U, bitIndex); // check correct bit length

            bitIndex = 0;
            var value = SpanBitHelper.GetFixedPointS<#= i #>Bit(ref readSpan, ref bitIndex, fraction, offset);
            if (double.IsNaN(expected))
            {
                Assert.Equal(expected, value);
            }
            else
            {
                value.Should().BeApproximately(expected, fraction);
            }
            Assert.Equal(data.Length, readSpan.Length); // Check thant didn't slice span
            Assert.Equal(<#= i #>U, bitIndex); // check correct bit length
        }

        [Theory]
        [InlineData(6*Fraction1 + Offset1 , Fraction1, Offset1, Fraction1*5 + Offset1, -Fraction1 * 5 + Offset1)]
        [InlineData(-6 * Fraction1 + Offset1, Fraction1, Offset1, Fraction1 * 5 + Offset1, -Fraction1 * 5 + Offset1)]
        public void FixedPointS<#= i #>TestMaxMinSetError(double writed, double fraction, double offset, double max, double min)
        {
            var data = new byte[256];

            uint bitIndex = 0;
            Assert.Throws<ArgumentOutOfRangeException>(() =>
            {
                var writeSpan = new Span<byte>(data);
                SpanBitHelper.SetFixedPointS<#= i #>Bit(ref writeSpan, ref bitIndex, writed, fraction, offset, max, min);
            });


        }

        [Theory]
        [InlineData(6 * Fraction1 + Offset1, Fraction1, Offset1, Fraction1 * 5 + Offset1, -Fraction1 * 5 + Offset1)]
        [InlineData(-6 * Fraction1 + Offset1, Fraction1, Offset1, Fraction1 * 5 + Offset1, -Fraction1 * 5 + Offset1)]
        public void FixedPointS<#= i #>TestMaxMinGetError(double writed, double fraction, double offset,double max,double min)
        {
            var data = new byte[256];
            
            uint bitIndex = 0;
            var writeSpan = new Span<byte>(data);
            SpanBitHelper.SetFixedPointS<#= i #>Bit(ref writeSpan, ref bitIndex, writed, fraction, offset);

            bitIndex = 0;
            Assert.Throws<ArgumentOutOfRangeException>(() =>
            {
                var readSpan = new ReadOnlySpan<byte>(data);
                SpanBitHelper.GetFixedPointS<#= i #>Bit(ref readSpan, ref bitIndex, fraction, offset,max,min);
            });


        }

        #endregion

    <# } #>
    }
}
